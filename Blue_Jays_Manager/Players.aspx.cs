using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Blue_Jays_Manager.Models.DataAccessLayer;
using Blue_Jays_Manager.Models.DataModels;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Specialized;
using System.Diagnostics;

namespace Blue_Jays_Manager
{
    public partial class Player : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {


            if (!IsPostBack)
            {
                DataRetrieval retrieve = new DataRetrieval();

                // list of rows of players
                List<PlayerRoster> playerRoster = retrieve.SelectAllPlayers();

                if (Session["login"].ToString() == "loggedIn")
                {
                    PlayerRosterGridView.AutoGenerateEditButton = true;
                    PlayerRosterGridView.AutoGenerateDeleteButton = true;
                }
                if (Cache["PlayerRoster"] == null)
                {
                    Cache.Insert("PlayerRoster", playerRoster);
                }
                PlayerRosterGridView.DataSource = (List<PlayerRoster>)Cache["PlayerRoster"];
                PlayerRosterGridView.DataBind();
            }
        }

        /**
         * <summary>
         * The user can search the player roster stored in cache based on three search criteria:
         * player number, name or position. The resulting set is returned to the gridview to be
         * dispalyed on the same page.
         * 
         * Querying with empty string will yield entire player roster.
         * </summary>
         */
        protected void submitButton_Click(object sender, EventArgs e)
        {
            string searchCriteria = searchCategory.SelectedValue;
            string searchText = "";
            int searchNum = 0;
            List<PlayerRoster> roster = (List<PlayerRoster>)Cache["PlayerRoster"];
            List<PlayerRoster> resultSet = new List<PlayerRoster>();

            if (searchTextBox.Text != "")
            {
                switch (searchCriteria)
                {
                    // player number search only accepts numbers
                    case "Player Number":
                        if (!int.TryParse(searchTextBox.Text, out searchNum))
                        {
                            NoRecords.Text = "Please enter a valid number!";
                            NoRecords.Visible = true;
                            PlayerRosterGridView.Visible = false;
                            return;
                        }
                        if (searchNum < 0)
                        {
                            NoRecords.Text = "Please enter a positive player number!";
                            NoRecords.Visible = true;
                            PlayerRosterGridView.Visible = false;
                            return;
                        }

                        break;

                    default: // position and player name would accept string
                        searchText = searchTextBox.Text;
                        break;
                }

                foreach (PlayerRoster player in roster)
                {
                    switch (searchCriteria)
                    {
                        case "Player Number":
                            if (player.PlayerNum == searchNum)
                                resultSet.Add(player);
                            break;
                        case "Name":
                            if (player.Name.ToLower().IndexOf(searchText.ToLower()) != -1)
                                resultSet.Add(player);
                            break;
                        default: // position
                            if (player.Position.ToLower() == searchText.ToLower())
                                resultSet.Add(player);
                            break;
                    }
                }
            }
            else
            {
                resultSet = (List<PlayerRoster>)Cache["PlayerRoster"];
            }

            PlayerRosterGridView.DataSource = resultSet;
            PlayerRosterGridView.DataBind();

            if (PlayerRosterGridView.Rows.Count < 1)
            {
                NoRecords.Text = "There are no players which match the search criteria.";
                NoRecords.Visible = true;
                PlayerRosterGridView.Visible = false;
            }
            else
            {
                NoRecords.Visible = false;
                PlayerRosterGridView.Visible = true;
            }
        }

        protected void PlayerRosterGridView_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (Session["login"].ToString() == "loggedIn")
            {
                Server.Transfer("PlayerDetails.aspx?playerNumber=" + PlayerRosterGridView.SelectedRow.Cells[2].Text);
            }
            else
            {
                Server.Transfer("PlayerDetails.aspx?playerNumber=" + PlayerRosterGridView.SelectedRow.Cells[1].Text);
            }
        }

        protected void PlayerRosterGridView_RowEditing(object sender, GridViewEditEventArgs e)
        {
            PlayerRosterGridView.EditIndex = e.NewEditIndex;
            PlayerRosterGridView.DataSource = (List<PlayerRoster>)Cache["PlayerRoster"];
            PlayerRosterGridView.DataBind();

        }

        protected void PlayerRosterGridView_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            if (Cache["PlayerRoster"] != null)
            {
                List<PlayerRoster> roster = (List<PlayerRoster>)Cache["PlayerRoster"];

                string playerNum = (Session["login"].ToString() == "loggedIn") ? PlayerRosterGridView.Rows[e.RowIndex].Cells[2].Text : PlayerRosterGridView.Rows[e.RowIndex].Cells[1].Text;

                Debug.WriteLine(playerNum);

                PlayerRoster player = roster.SingleOrDefault(x => x.PlayerNum == Convert.ToInt32(playerNum));

                if (player != null)
                {
                    roster.Remove(player);
                    Cache.Insert("PlayerRoster", roster);
                }

                PlayerRosterGridView.EditIndex = -1;
                PlayerRosterGridView.DataSource = (List<PlayerRoster>)Cache["PlayerRoster"];
                PlayerRosterGridView.DataBind();
            }
        }

        protected void PlayerRosterGridView_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            PlayerRosterGridView.EditIndex = -1;
            PlayerRosterGridView.DataSource = (List<PlayerRoster>)Cache["PlayerRoster"];
            PlayerRosterGridView.DataBind();
        }

        protected void PlayerRosterGridView_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            if (Cache["PlayerRoster"] != null)
            {

                List<PlayerRoster> roster = (List<PlayerRoster>)Cache["PlayerRoster"];

                IOrderedDictionary rowValues = e.NewValues;

                int playerNum = Convert.ToInt32(PlayerRosterGridView.Rows[e.RowIndex].Cells[2].Text);

                PlayerRoster player = roster.SingleOrDefault(x => x.PlayerNum == Convert.ToInt32(playerNum));

                int indexOfPlayer = roster.IndexOf(player);

                player.Name = rowValues["Name"].ToString();
                player.Position = rowValues["Position"].ToString();
                player.Height = Convert.ToInt32(rowValues["Height"]);
                player.Weight = Convert.ToInt32(rowValues["Weight"]);

                roster.RemoveAt(indexOfPlayer);

                roster.Insert(indexOfPlayer, player);

                //roster.Add(player);
                PlayerRosterGridView.EditIndex = -1;

                PlayerRosterGridView.DataSource = roster;
                PlayerRosterGridView.DataBind();
                Cache["PlayerRoster"] = roster;
            }
        }


    }
}
